pipeline {
    agent any

    environment {
        DOCKERHUB_REPO = 'yourdockerhubusername/collaborative-form-system'
        EC2_HOST = 'your-ec2-public-ip'
        // Do NOT place ssh private key or docker credentials in environment
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Checking out source code...'
                checkout scm
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    echo 'üì¶ Installing backend dependencies...'
                    sh 'npm install'
                    echo '‚öôÔ∏è Building backend (if build script exists)...'
                    sh 'npm run build || echo "No build script found in backend/package.json; skipping build."'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    echo 'üì¶ Installing frontend dependencies...'
                    sh 'npm install'
                    echo '‚öôÔ∏è Building frontend...'
                    sh 'npm run build'
                }
            }
        }

        stage('Docker Login') {
            steps {
                echo 'üîê Logging into DockerHub...'
                script {
                    // Ensure you have a Jenkins credential of kind "Username with password" and ID 'dockerhub-credentials'
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        def rc = sh(returnStatus: true, script: 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin')
                        if (rc != 0) {
                            error("Docker login failed (exit code ${rc}). Check dockerhub-credentials username/password (use a Docker Hub token).")
                        } else {
                            echo "Docker login succeeded as ${DOCKER_USER}"
                        }
                    }
                }
            }
        }

        stage('Build & Push Images') {
            steps {
                script {
                    echo 'üê≥ Building Docker images...'

                    // Backend Dockerfile detection and build
                    if (fileExists('backend/Dockerfile')) {
                        sh 'docker build -t $DOCKERHUB_REPO-backend -f backend/Dockerfile backend'
                    } else if (fileExists('backend/DockerFile')) {
                        sh 'docker build -t $DOCKERHUB_REPO-backend -f backend/DockerFile backend'
                    } else {
                        error "Backend Dockerfile not found (backend/Dockerfile or backend/DockerFile). Please add it."
                    }

                    // Frontend Dockerfile detection and build
                    if (fileExists('frontend/Dockerfile')) {
                        sh 'docker build -t $DOCKERHUB_REPO-frontend -f frontend/Dockerfile frontend'
                    } else if (fileExists('frontend/DockerFile')) {
                        sh 'docker build -t $DOCKERHUB_REPO-frontend -f frontend/DockerFile frontend'
                    } else {
                        error "Frontend Dockerfile not found (frontend/Dockerfile or frontend/DockerFile). Please add it."
                    }

                    echo 'üì§ Pushing images to DockerHub...'
                    sh 'docker push $DOCKERHUB_REPO-backend'
                    sh 'docker push $DOCKERHUB_REPO-frontend'
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                echo 'üöÄ Deploying on EC2 via SSH...'
                script {
                    // Ensure you have a Jenkins credential of kind "SSH Username with private key" and ID 'ec2-ssh-key'
                    withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'EC2_KEY_FILE', usernameVariable: 'EC2_USER_FROM_CRED')]) {
                        sh """
                        chmod 600 "$EC2_KEY_FILE"
                        ssh -o StrictHostKeyChecking=no -i "$EC2_KEY_FILE" ${EC2_USER_FROM_CRED}@${EC2_HOST} '
                            set -e
                            echo "Pulling images..."
                            docker pull $DOCKERHUB_REPO-backend
                            docker pull $DOCKERHUB_REPO-frontend
                            echo "Changing to app dir and restarting compose..."
                            cd /home/${EC2_USER_FROM_CRED}/app || { echo "app dir not found"; exit 1; }
                            docker compose down || true
                            docker compose up -d
                        '
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Deployment successful!'
            script {
                node {
                    sh 'docker logout'
                }
            }
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs for details.'
            script {
                node {
                    sh 'docker logout || true'
                }
            }
        }
    }
}
