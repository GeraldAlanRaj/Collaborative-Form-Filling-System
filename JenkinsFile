pipeline {
    agent any

    environment {
        // repo names on Docker Hub (your actual namespaces)
        BACKEND_REPO = 'gerryaj2004/proactively-backend'
        FRONTEND_REPO = 'gerryaj2004/proactively-frontend'
        EC2_HOST = 'your-ec2-public-ip'   // <-- replace with your EC2 public IP or hostname
    }

    stages {
        stage('Checkout') {
            steps {
                echo '📥 Checking out source code...'
                checkout scm
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    echo '📦 Installing backend dependencies...'
                    sh 'npm install'
                    echo '⚙️ Building backend (if build script exists)...'
                    sh 'npm run build || echo "No build script found in backend/package.json; skipping build."'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    echo '📦 Installing frontend dependencies...'
                    sh 'npm install'
                    echo '⚙️ Building frontend...'
                    sh 'npm run build'
                }
            }
        }

        stage('Docker Login (use Jenkins credential)') {
            steps {
                script {
                    // Ensure credentialId 'dockerhub-credentials' exists (Username with password)
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER_TMP', passwordVariable: 'DOCKER_PASS_TMP')]) {
                        env.DOCKER_USER = DOCKER_USER_TMP
                        def rc = sh(returnStatus: true, script: 'echo "$DOCKER_PASS_TMP" | docker login -u "$DOCKER_USER_TMP" --password-stdin')
                        if (rc != 0) {
                            error("Docker login failed (exit code ${rc}). Check dockerhub-credentials username/password (use a Docker Hub token).")
                        } else {
                            echo "Docker login succeeded as ${env.DOCKER_USER}"
                        }
                    }
                }
            }
        }

        stage('Build & Push Images') {
            steps {
                script {
                    // derive tags (use BUILD_NUMBER if available)
                    def tag = env.BUILD_NUMBER ?: 'latest'
                    def backendImage = "${env.BACKEND_REPO}:${tag}"
                    def frontendImage = "${env.FRONTEND_REPO}:${tag}"

                    echo "🐳 Will build and push:"
                    echo "  - ${backendImage}"
                    echo "  - ${frontendImage}"

                    // Backend build (detect Dockerfile / DockerFile)
                    if (fileExists('backend/Dockerfile')) {
                        sh "docker build -t ${backendImage} -f backend/Dockerfile backend"
                    } else if (fileExists('backend/DockerFile')) {
                        sh "docker build -t ${backendImage} -f backend/DockerFile backend"
                    } else {
                        error "Backend Dockerfile not found (backend/Dockerfile or backend/DockerFile)."
                    }

                    // Frontend build (detect Dockerfile / DockerFile)
                    if (fileExists('frontend/Dockerfile')) {
                        sh "docker build -t ${frontendImage} -f frontend/Dockerfile frontend"
                    } else if (fileExists('frontend/DockerFile')) {
                        sh "docker build -t ${frontendImage} -f frontend/DockerFile frontend"
                    } else {
                        error "Frontend Dockerfile not found (frontend/Dockerfile or frontend/DockerFile)."
                    }

                    echo '📤 Pushing images to DockerHub...'
                    def rc1 = sh(returnStatus: true, script: "docker push ${backendImage}")
                    if (rc1 != 0) {
                        error("Failed to push ${backendImage}. Ensure Docker Hub repo exists and user ${env.DOCKER_USER} can push.")
                    }
                    def rc2 = sh(returnStatus: true, script: "docker push ${frontendImage}")
                    if (rc2 != 0) {
                        error("Failed to push ${frontendImage}. Ensure Docker Hub repo exists and user ${env.DOCKER_USER} can push.")
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                echo '🚀 Deploying on EC2 via SSH...'
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'EC2_KEY_FILE', usernameVariable: 'EC2_USER_FROM_CRED')]) {
                        sh """
                        chmod 600 "$EC2_KEY_FILE"
                        ssh -o StrictHostKeyChecking=no -i "$EC2_KEY_FILE" ${EC2_USER_FROM_CRED}@${EC2_HOST} '
                            set -e
                            echo "Pulling images..."
                            docker pull ${env.BACKEND_REPO}:${env.BUILD_NUMBER ?: "latest"}
                            docker pull ${env.FRONTEND_REPO}:${env.BUILD_NUMBER ?: "latest"}
                            cd /home/${EC2_USER_FROM_CRED}/app || { echo "app dir not found"; exit 1; }
                            docker compose down || true
                            docker compose up -d
                        '
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ Deployment successful!'
            script {
                node {
                    sh 'docker logout'
                }
            }
        }
        failure {
            echo '❌ Pipeline failed. Check logs for details.'
            script {
                node {
                    sh 'docker logout || true'
                }
            }
        }
    }
}
